name: Sync Spec-Kit to GitHub Issues

on:
  push:
    paths:
      - 'tasks.md'
  workflow_dispatch: {}

jobs:
  sync-tasks:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write
    steps:
      - uses: actions/checkout@v4

      - name: Ensure labels and milestones from tasks.md
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            const md = fs.readFileSync('tasks.md', 'utf8');
            const lines = md.split('\n');

            // Map phase headers -> milestone titles
            let currentMilestone = null;
            const tasks = [];

            for (let i = 0; i < lines.length; i++) {
              const line = lines[i];

              // Match "## Phase X: Name - ..."
              const phaseMatch = line.match(/^##\s+(Phase\s+\d+):\s+(.+?)\s*(?:-|—)/);
              if (phaseMatch) {
                currentMilestone = `${phaseMatch[1]}: ${phaseMatch[2].trim()}`;
                continue;
              }

              // Match "- [ ] (T-001) **Task Title**"
              const m = /^- \[ \] \((T-\d{3}[a-z]?)\) \*\*(.+?)\*\*/.exec(line);
              if (m) {
                const id = m[1];
                const title = `(${id}) ${m[2]}`;

                // Capture indented body until next top-level task
                let j = i + 1, bodyLines = [];
                while (j < lines.length && !lines[j].match(/^- \[ \] \(\T-\d{3}[a-z]?\) \*\*/)) {
                  bodyLines.push(lines[j]); j++;
                }
                const body = bodyLines.join('\n');

                tasks.push({ id, title, body, milestone: currentMilestone });
              }
            }

            async function ensureMilestone(title) {
              if (!title) return undefined;
              const { data: milestones } = await github.rest.issues.listMilestones({
                owner: context.repo.owner, repo: context.repo.repo, state: 'open'
              });
              let m = milestones.find(x => x.title === title);
              if (!m) {
                const created = await github.rest.issues.createMilestone({
                  owner: context.repo.owner, repo: context.repo.repo, title
                });
                m = created.data;
              }
              return m.number;
            }

            // Add delay function to prevent rate limiting
            const delay = ms => new Promise(resolve => setTimeout(resolve, ms));

            for (const t of tasks) {
              const labels = [];
              if (t.milestone?.match(/^Phase 0/)) labels.push('phase-0');
              if (t.milestone?.match(/^Phase 1/)) labels.push('phase-1');
              if (t.milestone?.match(/^Phase 2/)) labels.push('phase-2');
              if (t.milestone?.match(/^Phase 3/)) labels.push('phase-3');
              if (t.milestone?.match(/^Phase 4/)) labels.push('phase-4');

              // ensure phase labels exist (ignore errors if already created)
              for (const L of labels) {
                try {
                  await github.rest.issues.createLabel({
                    owner: context.repo.owner, repo: context.repo.repo,
                    name: L, color: 'ededed'
                  });
                  await delay(100); // 100ms delay between label creations
                } catch (e) {}
              }

              // Search by exact title to avoid duplicates
              const { data: search } = await github.rest.search.issuesAndPullRequests({
                q: `repo:${context.repo.owner}/${context.repo.repo} in:title "${t.title}"`
              });
              let issueNumber = search.items?.find(i => i.title === t.title)?.number;

              const milestoneNumber = t.milestone ? await ensureMilestone(t.milestone) : undefined;

              const issueBody = t.body + '\n\n_Checklist:_\n- [ ] Implementation complete\n- [ ] Tests passing\n- [ ] Home inspection >90%\n- [ ] Git commit with ' + t.id + ' reference';

              if (!issueNumber) {
                const created = await github.rest.issues.create({
                  owner: context.repo.owner, repo: context.repo.repo,
                  title: t.title,
                  body: issueBody,
                  labels,
                  milestone: milestoneNumber
                });
                issueNumber = created.data.number;
                console.log(`Created issue: ${t.title}`);
              } else {
                await github.rest.issues.update({
                  owner: context.repo.owner, repo: context.repo.repo,
                  issue_number: issueNumber,
                  body: issueBody,
                  labels,
                  milestone: milestoneNumber
                });
                console.log(`Updated issue: ${t.title}`);
              }

              // Add delay between issue operations to prevent rate limiting
              await delay(500); // 500ms delay between each issue
            }

      - name: Done
        run: echo "Issues synced from tasks.md with rate limiting ✅"